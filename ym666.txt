

66666666666666666

66666666666666666

66666666666666666

66666666666666666

66666666666666666

66666666666666666
maven工作的过程？ 

	建立各个module之间的依赖关系，越底层的依赖的module先生成，下载远程库中的依赖，先生成本地被依赖的module







1.maven 是什么？
	Maven是一个项目管理和综合工具。Maven提供了开发人员构建一个完整的生命周期框架。开发团队可以自动完成项目的基础工具建设，Maven使用标准的目录结构和默认构建生命周期。 
	我们经常用的就是jar包的管理。

2.Maven常用命令有哪些?
	打包：mvn package
	编译：mvn compile
	编译测试程序：mvn test-compile
	清空：mvn clean	
	运行测试：mvn test
	
   
3.Maven有哪些优点和缺点?
	优点如下：
		简化了项目依赖管理：
		易于上手，对于新手可能一个"mvn clean package"命令就可能满足他的工作
		便于与持续集成工具（jenkins）整合
		便于项目升级，无论是项目本身升级还是项目使用的依赖升级。
		有助于多模块项目的开发，一个模块开发好后，发布到仓库，依赖该模块时可以直接从仓库更新，而不用自己去编译。
		maven有很多插件，便于功能扩展，比如生产站点，自动发布版本等

	缺点如下：
		maven是一个庞大的构建系统，学习难度大
		maven采用约定优于配置的策略（convention over configuration），虽然上手容易，但是一旦出了问题，难于调试。
		当依赖很多时，m2eclipse 老是搞得Eclipse很卡。
		中国的网络环境差，很多repository无法访问，比如google code， jboss 仓库无法访问等。

4.. Maven有哪些仓库?他们有什么关系?
	远程仓库，本地仓库，中央仓库
	关系：需要jar包的时候先去本地看有不有，没有去远程仓库，如果远程仓库也没有就去中央仓库找，会把找到的jar的信息同步到本地仓库和远程仓库

5..既然Mayen进行了依赖管理，为什么还会出现依赖冲突?处理依赖冲突的手段是什么?
	如工程中需要引入A、B，而A依赖1.0版本的C，B依赖2.0版本的C，那么问题来了，C使用的版本将由引入A、B的顺序而定？这显然不靠谱！如果A的依赖写在B的依赖后面，
	将意味着最后引入的是1.0版本的C，很可能在运行阶段出现类（ClassNotFoundException）、方法（NoSuchMethodError）找不到的错误（因为B使用的是高版本的C）！
	这里其实涉及到了2个概念：依赖传递（transitive）、Maven的最近依赖策略。
	
	处理依赖冲突的手段是：使用<dependency> 
	
6.Maven的生命周期?
	清理、编译、测试、打包、集成测试、验证、部署

	Maven定义了三套生命周期：clean、default、site，每个生命周期都包含了一些阶段（phase）。
	三套生命周期相互独立，但各个生命周期中的阶段却是有顺序的，且后面的夹断依赖于前面的阶段。
	执行某个阶段时，其前面的阶段会依顺序执行，但不会触发另外两套生命周期中的任何阶段。

7.scope依赖范围?
	compile：默认的scope，运行期有效，需要打入包中
	provided：编译期有效，运行期不需要提供，不会打入包中
	runtime：编译不需要，在运行期有效，需要导入包中。（接口与实现分离）
	test：测试需要，不会打入包中
	system：非本地仓库引入、存在系统的某个路径下的jar。（一般不使用）