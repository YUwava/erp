1.Maven版本规则是什么?
	< 主版本 >.< 次版本 >.< 增量版本 >-< 里程碑版本 >     

	主版本：表示项目的重大架构变更。例如： Maven2 和 Maven1 相去甚远； Struts1 和 Struts2 采用了  不同的架构。

       	次版本：表示较大范围的功能增加和变化，及 Bug 修复。例如 Nexus 1.5 较 1.4 添加了 LDAP 的支持，并且修复了很多 Bug, 但是从总体架构来说，没有什么变化。

       	增量版本：顾名思义，这往往指某一个版本的里程碑

2.Maven<dependencie >是什么?
	相互依赖性：在指令被解码后,指令就会在类型和相互依赖性(dependencies)的基础上被分析. 
		这就允许处理器来优化这一过程,那些指令应该被一起发送到3条管线(pipeline)中,这样也会使指令计划(scheduling)更加有效.

	依赖：Ant在构建过程上非常优秀,它是一个把模型定义在目标(targets)和依赖(dependencies)上的构建系统. 每个目标包含一组用XML编写的指令. 
		有copy目标,javac目标和jar目标. 当你使用Ant,你提供给Ant明确的指令以用来编译和打包你的输出.

3.Dependencie和dependencyManagement的区别是什么?
	1)dependencies:自动引入声明在dependencies里的所有依赖，并默认被所有的子项目继承。如果项目中不写依赖项，则会从父项目
	继承（属性全部继承）声明在父项目dependencies里的依赖项。

 	2)dependencyManagement里只是声明依赖，并不实现引入，因此子项目需要显示的声明需要的依赖。

4.对于一个多模块项目，如果管理项目依赖的版本?
	在每个模块的pom.xml文件中指定依赖版本，人为确保不同模块的pom.xml中相同依赖版本号一致。这样会导致维护复杂，后续如果变更依赖版本，需要每个模块排查修改。
	把所有的模块的依赖，都在根目录的pom.xml定义，然后被所有子模块引用。这样会导致子模块引用冗余，对于子模块不需要的依赖，也会被引用过来。
	

5.LASTEST、 RELEASE、 SNAPSHOT的区别?
	SNAPSHOT版本代表不稳定（快照版本），还在处于开发阶段，随时都会有变化。
	RELEASE则代表稳定的版本（发布版本），一般上线后都会改用RELEASE版本。
	LASTEST ：是指某个特定构件最新的发布版或者快照版(SNAPSHOT)，最近被部署到某个特定仓库的构件。
	
6.Maven依赖原则?
	Maven具有传递依赖（transitive dependency）的特性，即如果组件A依赖组件B，组件B依赖组件C，那么A就会自动产生对C的依赖，以此类推。
7.多模块如何聚合?
	在父类pom中modules引入
8.常见的Maven私服的仓库类型?
	代理仓库，宿主仓库，仓库组
